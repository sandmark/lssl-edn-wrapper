{:paths ["src" "resources"]

 :deps
 {com.taoensso/timbre {:mvn/version "6.3.1"}}

 :aliases
 {:dev {:extra-paths ["dev/src" "dev/resources" "test"]
        :extra-deps  {nubank/matcher-combinators  {:mvn/version "3.8.8"}
                      com.github.liquidz/testdoc  {:mvn/version "1.5.109"}
                      org.clojure/tools.namespace {:mvn/version "1.4.4"}}}}

 :tasks
 {:requires ([lssl.core :as core]
             [selmer.parser :as parser]
             [clojure.edn :as edn]
             [clojure.java.io :as io]
             [clojure.string :as str])

  -config-file   "lssl-config.edn"
  -template-file (io/resource "lssl.toml.selmer")
  -toml-path     "SFSE/Plugins/ConsoleCommandRunner/lssl.toml"
  -bat-path      "Root/lssl-config.txt"

  -template {:depends [-template-file]
             :task    (slurp -template-file)}

  -config {:depends [-config-file]
           :task    (edn/read-string (slurp -config-file))}

  -toml-file {:depends [-toml-path]
              :task    (do (io/make-parents (io/file -toml-path))
                           -toml-path)}

  -bat-file {:depends [-bat-path]
             :task    (do (io/make-parents (io/file -bat-path))
                          -bat-path)}

  commands {:depends [-config]
            :task    (core/convert -config)}

  build-bat {:depends [commands -bat-file]
             :task    (spit -bat-file (str/join "\n" commands))}

  build-toml {:depends [commands -toml-file -template]
              :task    (spit -toml-file (parser/render -template {:lines commands}))}

  build {:depends [build-bat build-toml -toml-file -bat-file -config-file]
         :task    (println (format "'%s' was successfully converted to '%s' and '%s'."
                                   -config-file -bat-file -toml-file))}}}
